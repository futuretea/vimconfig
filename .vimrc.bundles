" =============================================================================
"                          << 插件配置配置 >>
" =============================================================================

set nocompatible                                      "禁用 Vi 兼容模式
call plug#begin('~/.vim/plugged')

" 文件

" 编辑
"Plug 'mbbill/undotree'
"Plug 'airblade/vim-gitgutter'
"Plug 'terryma/vim-expand-region'
"Plug 'terryma/vim-multiple-cursors'
" 插入
"Plug 'jiangmiao/auto-pairs'
"Plug 'drmingdrmer/xptemplate'
" 格式
Plug 'bronson/vim-trailing-whitespace'
Plug 'Chiel92/vim-autoformat'
Plug 'junegunn/vim-easy-align'
"Plug 'godlygeek/tabular'
"Plug 'tpope/vim-surround'
Plug 'scrooloose/nerdcommenter'
" 样式
Plug 'justinmk/vim-syntax-extra'
"Plug 'octol/vim-cpp-enhanced-highlight'
" 视图
Plug 'bling/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'Yggdroot/indentLine'
Plug 'morhetz/gruvbox'
" 窗口
"Plug 'jlanzarotta/bufexplorer'
" 查看
"Plug 'derekwyatt/vim-fswitch'
Plug 'easymotion/vim-easymotion'
Plug 'scrooloose/nerdtree'
"Plug 'kshenoy/vim-signature'
"Plug 'Yggdroot/LeaderF', { 'do': './install.sh'  }
"Plug 'dyng/ctrlsf.vim'
" 分析
"Plug 'aceofall/gtags.vim'
"Plug 'majutsushi/tagbar'
"Plug 'wesleyche/SrcExpl'
"Plug 'hari-rangarajan/CCTree'
" 工具
Plug 'w0rp/ale'

"Plug 'Shougo/neocomplete.vim'
Plug 'maralla/completor.vim'
"Plug 'Valloric/YouCompleteMe'

"Plug 'Shougo/vimproc.vim', {'do' : 'make'}
"Plug 'idanarye/vim-vebugger'

Plug 'fatih/vim-go', { 'do': ':GoInstallBinaries' }
" 配置
" 帮助

" =============================================================================
"                          << 以下为常用插件配置 >>
" =============================================================================
" -----------------------------------------------------------------------------
"  < airline 插件配置 >
" -----------------------------------------------------------------------------
" 状态栏插件，更好的状态栏效果
"设置主题
let g:airline_theme="badwolf"
" 开启tabline
let g:airline#extensions#tabline#enabled = 1
" tabline中当前buffer两端的分隔字符
let g:airline#extensions#tabline#left_sep = ' '
" tabline中未激活buffer两端的分隔字符
let g:airline#extensions#tabline#left_alt_sep = '|'
" tabline中buffer显示编号
let g:airline#extensions#tabline#buffer_nr_show = 1
" -----------------------------------------------------------------------------
"  < auto-pairs 插件配置 >
" -----------------------------------------------------------------------------
" 用于括号与引号自动补全
" <CR>  : Insert new indented line after return if cursor in blank brackets or quotes.
" <BS>  : Delete brackets in pair
" <M-p> : Toggle Autopairs (g:AutoPairsShortcutToggle)
" <M-e> : Fast Wrap (g:AutoPairsShortcutFastWrap)
" <M-n> : Jump to next closed pair (g:AutoPairsShortcutJump)
" <M-b> : BackInsert (g:AutoPairsShortcutBackInsert)
"let g:AutoPairsFlyMode = 1
" au Filetype FILETYPE let b:AutoPairs = {"(": ")"}
" let g:AutoPairsShortcutToggle = '<another key>'
" inoremap <buffer> <silent> <CR> <C-R>=AutoPairsSpace()<CR>
" inoremap <buffer> <silent> <CR> <C-R>=AutoPairsReturn()<CR>
" inoremap <buffer> <silent> <BS> <C-R>=AutoPairsDelete()<CR>
" -----------------------------------------------------------------------------
"  < BufExplorer 插件配置 >
" -----------------------------------------------------------------------------
" 快速轻松的在缓存中切换（相当于另一种多个文件间的切换方式）
" <Leader>be 在当前窗口显示缓存列表并打开选定文件
" <Leader>bs 水平分割窗口显示缓存列表，并在缓存列表窗口中打开选定文件
" <Leader>bv 垂直分割窗口显示缓存列表，并在缓存列表窗口中打开选定文件
let g:bufExplorerSortBy = 'name'               " 按文件名排序
" -----------------------------------------------------------------------------
"  < fswitch 插件配置 >
" -----------------------------------------------------------------------------
" 用于切换C/C++头文件
nmap <silent> <Leader>of :FSHere<cr>
nmap <silent> <Leader>ol :FSRight<cr>
nmap <silent> <Leader>oL :FSSplitRight<cr>
nmap <silent> <Leader>oh :FSLeft<cr>
nmap <silent> <Leader>oH :FSSplitLeft<cr>
nmap <silent> <Leader>ok :FSAbove<cr>
nmap <silent> <Leader>oK :FSSplitAbove<cr>
nmap <silent> <Leader>oj :FSBelow<cr>
nmap <silent> <Leader>oJ :FSSplitBelow<cr>
" -----------------------------------------------------------------------------
"  < indentLine 插件配置 >
" -----------------------------------------------------------------------------
" 开启/关闭对齐线
nmap <leader>il :IndentLinesToggle<CR>
" 设置终端对齐线颜色
let g:indentLine_color_term = 239
" -----------------------------------------------------------------------------
"  < nerdcommenter 插件配置 >
" -----------------------------------------------------------------------------
" 我主要用于C/C++代码注释(其它的也行)
" 以下为插件默认快捷键，其中的说明是以C/C++为例的，其它语言类似
" <Leader>ci 以每行一个 /* */ 注释选中行(选中区域所在行)，再输入则取消注释
" <Leader>cm 以一个 /* */ 注释选中行(选中区域所在行)，再输入则称重复注释
" <Leader>cc 以每行一个 /* */ 注释选中行或区域，再输入则称重复注释
" <Leader>cu 取消选中区域(行)的注释，选中区域(行)内至少有一个 /* */
" <Leader>ca 在/*...*/与//这两种注释方式中切换（其它语言可能不一样了）
" <Leader>cA 行尾注释
let NERDSpaceDelims = 1                     "在左注释符之后，右注释符之前留有空格

" -----------------------------------------------------------------------------
"  < nerdtree 插件配置 >
" -----------------------------------------------------------------------------
" 有目录树结构的文件浏览插件
map <leader>nt :NERDTreeToggle<CR>
let NERDTreeHighlightCursorline=1
let NERDTreeIgnore=[ '\.pyc$', '\.pyo$', '\.obj$', '\.o$', '\.so$', '\.egg$', '^\.git$', '^\.svn$', '^\.hg$' ]
"close vim if the only window left open is a NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | end
" s/v 分屏打开文件
let g:NERDTreeMapOpenSplit = 's'
let g:NERDTreeMapOpenVSplit = 'v'
" -----------------------------------------------------------------------------
"  < SrcExpl 插件配置 >
" -----------------------------------------------------------------------------
" 增强源代码浏览，其功能就像Windows中的"Source Insight"
" // The switch of the Source Explorer
nmap <F7> :SrcExplToggle<CR>

" // Set the height of Source Explorer window
let g:SrcExpl_winHeight = 8

" // Set 100 ms for refreshing the Source Explorer
let g:SrcExpl_refreshTime = 100

" // Set "Enter" key to jump into the exact definition context
let g:SrcExpl_jumpKey = "<ENTER>"

" // Set "Space" key for back from the definition context
let g:SrcExpl_gobackKey = "<SPACE>"

" // In order to avoid conflicts, the Source Explorer should know what plugins
" // except itself are using buffers. And you need add their buffer names into
" // below listaccording to the command ":buffers!"
let g:SrcExpl_pluginList = [
            \ "__Tag_List__",
            \ "_NERD_tree_" ,
            \ "Source_Explorer"
            \ ]

" // Enable/Disable the local definition searching, and note that this is not
" // guaranteed to work, the Source Explorer doesn't check the syntax for now.
" // It only searches for a match with the keyword according to command 'gd'
let g:SrcExpl_searchLocalDef = 1

" // Do not let the Source Explorer update the tags file when opening
let g:SrcExpl_isUpdateTags = 0

" // Use 'Exuberant Ctags' with '--sort=foldcase -R .' or '-L cscope.files' to
" // create/update the tags file
let g:SrcExpl_updateTagsCmd = "ctags --sort=foldcase -R ."

" // Set "<C-F7>" key for updating the tags file artificially
let g:SrcExpl_updateTagsKey = "<C-F7>"

" // Set "<F8>" key for displaying the previous definition in the jump list
let g:SrcExpl_prevDefKey = "<F8>"

" // Set "<C-F8>" key for displaying the next definition in the jump list
let g:SrcExpl_nextDefKey = "<C-F8>"
" -----------------------------------------------------------------------------
"  < Tabular 插件配置 >
" -----------------------------------------------------------------------------
"  快速对齐，vim-markdown插件的前提
"  参考视频 "alignment with tabular in vim"
" -----------------------------------------------------------------------------
"  < Tagbar 插件配置 >
" -----------------------------------------------------------------------------
" 常规模式下输入 tb 调用插件，如果有打开 TagList 窗口则先将其关闭
nmap tb :TagbarToggle<CR>
let g:tagbar_sort = 0                          " 关闭排序
let g:tagbar_show_linenumbers = 1             " 显示行号
"let g:tagbar_autopreview = 1                   " 开启自动预览
let g:tagbar_width=30                       "设置窗口宽度
let g:tagbar_left=1                         "在左侧窗口中显示
" -----------------------------------------------------------------------------
"  < undotree 插件配置 >
" -----------------------------------------------------------------------------
nnoremap <leader>ud :UndotreeToggle<cr>
if has("persistent_undo")
    set undodir='$VIM/.undodir/'
    set undofile
endif
"内部默认设置如下
"let g:undotree_WindowLayout=1
"let g:undotree_SplitWidth=30
"let g:undotree_DiffpanelHeight=10
"let g:undotree_DiffAutoOpen=1
"let g:undotree_SetFocusWhenToggle=0
"let g:undotree_TreeNodeShape='*'
"let g:undotree_DiffCommand="diff"
"let g:undotree_RelativeTimestamp=1
"let g:undotree_HighlightChangedText=1
"let g:undotree_HighlightSyntaxAdd="DiffAdd"
"let g:undotree_HighlightSyntaxChange="DiffChange"
function g:Undotree_CustomMap()
    nmap <buffer> J <plug>UndotreeGoNextState
    nmap <buffer> K <plug>UndotreeGoPreviousState
endfunc
"List of the commands available for redefinition.
"
"    <plug>UndotreeHelp
"    <plug>UndotreeClose
"    <plug>UndotreeFocusTarget
"    <plug>UndotreeClearHistory
"    <plug>UndotreeTimestampToggle
"    <plug>UndotreeDiffToggle
"    <plug>UndotreeGoNextState
"    <plug>UndotreeGoPreviousState
"    <plug>UndotreeGoNextSaved
"    <plug>UndotreeGoPreviousSaved
"    <plug>UndotreeRedo
"    <plug>UndotreeUndo
"    <plug>UndotreeEnter
"    <plug>UndotreeEnter
" -----------------------------------------------------------------------------
"  < vim-trailing-whitespace 插件配置 >
" -----------------------------------------------------------------------------
" 快速去行尾空格
map <leader><space> :FixWhitespace<cr>
" -----------------------------------------------------------------------------
"  < vim-easy-align 插件配置 >
" -----------------------------------------------------------------------------
"快速赋值语句对齐
vmap <Leader>a <Plug>(EasyAlign)
nmap <Leader>a <Plug>(EasyAlign)
if !exists('g:easy_align_delimiters')
    let g:easy_align_delimiters = {}
endif
let g:easy_align_delimiters['#'] = { 'pattern': '#', 'ignore_groups': ['String'] }
" -----------------------------------------------------------------------------
"  < vim-easymotion 插件配置 >
" -----------------------------------------------------------------------------
let g:EasyMotion_smartcase = 1
"let g:EasyMotion_startofline = 0 " keep cursor colum when JK motion
map <Leader><leader>h <Plug>(easymotion-linebackward)
map <Leader><Leader>j <Plug>(easymotion-j)
map <Leader><Leader>k <Plug>(easymotion-k)
map <Leader><leader>l <Plug>(easymotion-lineforward)
" 重复上一次操作, 类似repeat插件, 很强大
map <Leader><leader>. <Plug>(easymotion-repeat)
" -----------------------------------------------------------------------------
"  < vim-expand-region 插件配置 >
" -----------------------------------------------------------------------------
" 选中区块
" map + <Plug>(expand_region_expand)
" map _ <Plug>(expand_region_shrink)
vmap v <Plug>(expand_region_expand)
vmap V <Plug>(expand_region_shrink)
"
"-----------------------------------------------------------------------------
"  < vim-multiple-cursors 插件配置 >
" -----------------------------------------------------------------------------
" 多光标选中编辑
let g:multi_cursor_use_default_mapping=0
" Default mapping
let g:multi_cursor_next_key='<C-u>'
let g:multi_cursor_prev_key='<C-d>'
let g:multi_cursor_skip_key='<C-x>'
let g:multi_cursor_quit_key='<Esc>'
" -----------------------------------------------------------------------------
"  < xptemplate 插件配置 >
" -----------------------------------------------------------------------------
" 主页上有动态图 https://github.com/drmingdrmer/xptemplate
" 视频演示：https://vimeo.com/4449258
let g:xptemplate_key= '<C-/>'
" <C-/>补全
" tab下一处,<S-tab>上一处
" --------------
"  部分可补全的关键词：
"  Date
"  Email
"  comment
"  for,if,
"  include,import
"  C macro
"  class
"  main,print，try
" -----------------------------------------------------------------------------
"  < vedebuger 插件配置 >
" -----------------------------------------------------------------------------
let g:vebugger_leader='<Leader>d'

" -----------------------------------------------------------------------------
"  < neocomplete 插件配置 >
" -----------------------------------------------------------------------------
"source ~/.vimrc.neocompelete
" -----------------------------------------------------------------------------
"  < ale 插件配置 >
" -----------------------------------------------------------------------------
nmap <Leader>s :ALEToggle<CR>
nmap <Leader>d :ALEDetail<CR>
nmap sp <Plug>(ale_previous_wrap)
nmap sn <Plug>(ale_next_wrap)
" -----------------------------------------------------------------------------
"  < completor 插件配置 >
" -----------------------------------------------------------------------------
let g:completor_clang_binary = '/usr/bin/clang'
let g:completor_python_binary = '/usr/bin/python'
" -----------------------------------------------------------------------------
"  < CCTree 插件配置 >
" -----------------------------------------------------------------------------
nnoremap <Leader>cct :CCTreeLoadDB<CR>
" -----------------------------------------------------------------------------
"  < LeaderF 插件配置 >
" -----------------------------------------------------------------------------
nnoremap <Leader>fu :LeaderfFunction<CR>
nnoremap <Leader>fua :LeaderfFunctionAll<CR>
nnoremap <Leader>fm :LeaderfMru<CR>
nnoremap <Leader>ft :LeaderfTag<CR>
nnoremap <Leader>fs :LeaderfSelf<CR>
nnoremap <Leader>fl :LeaderfLine<CR>
nnoremap <Leader>fla :LeaderfLineAll<CR>
let g:Lf_WildIgnore = {
            \ 'dir': ['.svn','.git','HTML'],
            \ 'file': ['GTAGS','GRTAGS','GPATH','cscope.*','ctags']
            \}
" -----------------------------------------------------------------------------
"  < ctrlsf 插件配置 >
" -----------------------------------------------------------------------------
let g:ctrlsf_search_mode = 'async'
let g:ctrlsf_ignore_dir = ['.git', '.svn', 'HTML']
nnoremap <Leader>sf :CtrlSF<CR>
nmap     <C-F>f <Plug>CtrlSFPrompt
vmap     <C-F>f <Plug>CtrlSFVwordPath
vmap     <C-F>F <Plug>CtrlSFVwordExec
nmap     <C-F>n <Plug>CtrlSFCwordPath
nmap     <C-F>p <Plug>CtrlSFPwordPath
nnoremap <C-F>o :CtrlSFOpen<CR>
nnoremap <C-F>t :CtrlSFToggle<CR>
inoremap <C-F>t <Esc>:CtrlSFToggle<CR>
" -----------------------------------------------------------------------------
"  < ycmd 插件配置 >
" -----------------------------------------------------------------------------
" let g:ycm_global_ycm_extra_conf='~/.vim/plugged/YouCompleteMe/third_party/ycmd/.ycm_extra_conf.py'
" -----------------------------------------------------------------------------
call plug#end()
